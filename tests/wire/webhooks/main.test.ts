// This file was auto-generated by Fern from our API Definition.

import * as AgentMail from "../../../src/api/index";
import { AgentMailClient } from "../../../src/Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("Webhooks", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        const rawResponseBody = {
            count: 1,
            limit: 1,
            next_page_token: "next_page_token",
            webhooks: [
                {
                    webhook_id: "webhook_id",
                    url: "url",
                    event_types: ["message.received", "message.received"],
                    inbox_ids: ["inbox_ids", "inbox_ids"],
                    secret: "secret",
                    enabled: true,
                    updated_at: "2024-01-15T09:30:00Z",
                    created_at: "2024-01-15T09:30:00Z",
                    client_id: "client_id",
                },
                {
                    webhook_id: "webhook_id",
                    url: "url",
                    event_types: ["message.received", "message.received"],
                    inbox_ids: ["inbox_ids", "inbox_ids"],
                    secret: "secret",
                    enabled: true,
                    updated_at: "2024-01-15T09:30:00Z",
                    created_at: "2024-01-15T09:30:00Z",
                    client_id: "client_id",
                },
            ],
        };
        server.mockEndpoint().get("/v0/webhooks").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.webhooks.list();
        expect(response).toEqual({
            count: 1,
            limit: 1,
            nextPageToken: "next_page_token",
            webhooks: [
                {
                    webhookId: "webhook_id",
                    url: "url",
                    eventTypes: ["message.received", "message.received"],
                    inboxIds: ["inbox_ids", "inbox_ids"],
                    secret: "secret",
                    enabled: true,
                    updatedAt: new Date("2024-01-15T09:30:00.000Z"),
                    createdAt: new Date("2024-01-15T09:30:00.000Z"),
                    clientId: "client_id",
                },
                {
                    webhookId: "webhook_id",
                    url: "url",
                    eventTypes: ["message.received", "message.received"],
                    inboxIds: ["inbox_ids", "inbox_ids"],
                    secret: "secret",
                    enabled: true,
                    updatedAt: new Date("2024-01-15T09:30:00.000Z"),
                    createdAt: new Date("2024-01-15T09:30:00.000Z"),
                    clientId: "client_id",
                },
            ],
        });
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        const rawResponseBody = {
            webhook_id: "webhook_id",
            url: "url",
            event_types: ["message.received", "message.received"],
            inbox_ids: ["inbox_ids", "inbox_ids"],
            secret: "secret",
            enabled: true,
            updated_at: "2024-01-15T09:30:00Z",
            created_at: "2024-01-15T09:30:00Z",
            client_id: "client_id",
        };
        server
            .mockEndpoint()
            .get("/v0/webhooks/webhook_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhooks.get("webhook_id");
        expect(response).toEqual({
            webhookId: "webhook_id",
            url: "url",
            eventTypes: ["message.received", "message.received"],
            inboxIds: ["inbox_ids", "inbox_ids"],
            secret: "secret",
            enabled: true,
            updatedAt: new Date("2024-01-15T09:30:00.000Z"),
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
            clientId: "client_id",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        const rawResponseBody = { name: "name", message: "message" };
        server
            .mockEndpoint()
            .get("/v0/webhooks/webhook_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.webhooks.get("webhook_id");
        }).rejects.toThrow(AgentMail.NotFoundError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });
        const rawRequestBody = { url: "url", event_types: ["message.received", "message.received"] };
        const rawResponseBody = {
            webhook_id: "webhook_id",
            url: "url",
            event_types: ["message.received", "message.received"],
            inbox_ids: ["inbox_ids", "inbox_ids"],
            secret: "secret",
            enabled: true,
            updated_at: "2024-01-15T09:30:00Z",
            created_at: "2024-01-15T09:30:00Z",
            client_id: "client_id",
        };
        server
            .mockEndpoint()
            .post("/v0/webhooks")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhooks.create({
            url: "url",
            eventTypes: ["message.received", "message.received"],
        });
        expect(response).toEqual({
            webhookId: "webhook_id",
            url: "url",
            eventTypes: ["message.received", "message.received"],
            inboxIds: ["inbox_ids", "inbox_ids"],
            secret: "secret",
            enabled: true,
            updatedAt: new Date("2024-01-15T09:30:00.000Z"),
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
            clientId: "client_id",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });
        const rawRequestBody = { url: "url", event_types: ["message.received", "message.received"] };
        const rawResponseBody = { name: "name", errors: { key: "value" } };
        server
            .mockEndpoint()
            .post("/v0/webhooks")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.webhooks.create({
                url: "url",
                eventTypes: ["message.received", "message.received"],
            });
        }).rejects.toThrow(AgentMail.ValidationError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        server.mockEndpoint().delete("/v0/webhooks/webhook_id").respondWith().statusCode(200).build();

        const response = await client.webhooks.delete("webhook_id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        const rawResponseBody = { name: "name", message: "message" };
        server
            .mockEndpoint()
            .delete("/v0/webhooks/webhook_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.webhooks.delete("webhook_id");
        }).rejects.toThrow(AgentMail.NotFoundError);
    });
});
