/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { AgentMailClient } from "../../src/Client";
import * as AgentMail from "../../src/api/index";

describe("ApiKeys", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        const rawResponseBody = {
            count: 1,
            next_page_token: "next_page_token",
            api_keys: [
                {
                    api_key_id: "api_key_id",
                    prefix: "prefix",
                    name: "name",
                    used_at: "2024-01-15T09:30:00Z",
                    created_at: "2024-01-15T09:30:00Z",
                },
                {
                    api_key_id: "api_key_id",
                    prefix: "prefix",
                    name: "name",
                    used_at: "2024-01-15T09:30:00Z",
                    created_at: "2024-01-15T09:30:00Z",
                },
            ],
        };
        server.mockEndpoint().get("/v0/api-keys").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            count: 1,
            nextPageToken: "next_page_token",
            apiKeys: [
                {
                    apiKeyId: "api_key_id",
                    prefix: "prefix",
                    name: "name",
                    usedAt: new Date("2024-01-15T09:30:00.000Z"),
                    createdAt: new Date("2024-01-15T09:30:00.000Z"),
                },
                {
                    apiKeyId: "api_key_id",
                    prefix: "prefix",
                    name: "name",
                    usedAt: new Date("2024-01-15T09:30:00.000Z"),
                    createdAt: new Date("2024-01-15T09:30:00.000Z"),
                },
            ],
        };
        const page = await client.apiKeys.list();

        expect(expected.apiKeys).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.apiKeys).toEqual(nextPage.data);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = {
            api_key_id: "api_key_id",
            api_key: "api_key",
            prefix: "prefix",
            name: "name",
            created_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .post("/v0/api-keys")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.apiKeys.create({
            name: "name",
        });
        expect(response).toEqual({
            apiKeyId: "api_key_id",
            apiKey: "api_key",
            prefix: "prefix",
            name: "name",
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = { name: "name", errors: { key: "value" } };
        server
            .mockEndpoint()
            .post("/v0/api-keys")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.apiKeys.create({
                name: "name",
            });
        }).rejects.toThrow(AgentMail.ValidationError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        server.mockEndpoint().delete("/v0/api-keys/api_key").respondWith().statusCode(200).build();

        const response = await client.apiKeys.delete("api_key");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        const rawResponseBody = { name: "name", message: "message" };
        server
            .mockEndpoint()
            .delete("/v0/api-keys/api_key")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.apiKeys.delete("api_key");
        }).rejects.toThrow(AgentMail.NotFoundError);
    });
});
