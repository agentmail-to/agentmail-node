/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { AgentMailClient } from "../../../src/Client";

describe("Messages", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        const rawResponseBody = {
            count: 1,
            limit: 1,
            next_page_token: "next_page_token",
            messages: [
                {
                    inbox_id: "inbox_id",
                    thread_id: "thread_id",
                    message_id: "message_id",
                    labels: ["labels", "labels"],
                    timestamp: "2024-01-15T09:30:00Z",
                    from: "from",
                    to: ["to", "to"],
                    cc: ["cc", "cc"],
                    bcc: ["bcc", "bcc"],
                    subject: "subject",
                    preview: "preview",
                    attachments: [
                        {
                            attachment_id: "attachment_id",
                            filename: "filename",
                            content_type: "content_type",
                            size: 1,
                            inline: true,
                        },
                        {
                            attachment_id: "attachment_id",
                            filename: "filename",
                            content_type: "content_type",
                            size: 1,
                            inline: true,
                        },
                    ],
                },
                {
                    inbox_id: "inbox_id",
                    thread_id: "thread_id",
                    message_id: "message_id",
                    labels: ["labels", "labels"],
                    timestamp: "2024-01-15T09:30:00Z",
                    from: "from",
                    to: ["to", "to"],
                    cc: ["cc", "cc"],
                    bcc: ["bcc", "bcc"],
                    subject: "subject",
                    preview: "preview",
                    attachments: [
                        {
                            attachment_id: "attachment_id",
                            filename: "filename",
                            content_type: "content_type",
                            size: 1,
                            inline: true,
                        },
                        {
                            attachment_id: "attachment_id",
                            filename: "filename",
                            content_type: "content_type",
                            size: 1,
                            inline: true,
                        },
                    ],
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/v0/inboxes/inbox_id/messages")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.inboxes.messages.list("inbox_id");
        expect(response).toEqual({
            count: 1,
            limit: 1,
            nextPageToken: "next_page_token",
            messages: [
                {
                    inboxId: "inbox_id",
                    threadId: "thread_id",
                    messageId: "message_id",
                    labels: ["labels", "labels"],
                    timestamp: new Date("2024-01-15T09:30:00.000Z"),
                    from: "from",
                    to: ["to", "to"],
                    cc: ["cc", "cc"],
                    bcc: ["bcc", "bcc"],
                    subject: "subject",
                    preview: "preview",
                    attachments: [
                        {
                            attachmentId: "attachment_id",
                            filename: "filename",
                            contentType: "content_type",
                            size: 1,
                            inline: true,
                        },
                        {
                            attachmentId: "attachment_id",
                            filename: "filename",
                            contentType: "content_type",
                            size: 1,
                            inline: true,
                        },
                    ],
                },
                {
                    inboxId: "inbox_id",
                    threadId: "thread_id",
                    messageId: "message_id",
                    labels: ["labels", "labels"],
                    timestamp: new Date("2024-01-15T09:30:00.000Z"),
                    from: "from",
                    to: ["to", "to"],
                    cc: ["cc", "cc"],
                    bcc: ["bcc", "bcc"],
                    subject: "subject",
                    preview: "preview",
                    attachments: [
                        {
                            attachmentId: "attachment_id",
                            filename: "filename",
                            contentType: "content_type",
                            size: 1,
                            inline: true,
                        },
                        {
                            attachmentId: "attachment_id",
                            filename: "filename",
                            contentType: "content_type",
                            size: 1,
                            inline: true,
                        },
                    ],
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        const rawResponseBody = {
            inbox_id: "inbox_id",
            thread_id: "thread_id",
            message_id: "message_id",
            labels: ["labels", "labels"],
            timestamp: "2024-01-15T09:30:00Z",
            from: "from",
            reply_to: ["reply_to", "reply_to"],
            to: ["to", "to"],
            cc: ["cc", "cc"],
            bcc: ["bcc", "bcc"],
            subject: "subject",
            preview: "preview",
            text: "text",
            html: "html",
            attachments: [
                {
                    attachment_id: "attachment_id",
                    filename: "filename",
                    content_type: "content_type",
                    size: 1,
                    inline: true,
                },
                {
                    attachment_id: "attachment_id",
                    filename: "filename",
                    content_type: "content_type",
                    size: 1,
                    inline: true,
                },
            ],
            in_reply_to: "in_reply_to",
            references: ["references", "references"],
            updated_at: "2024-01-15T09:30:00Z",
            created_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .get("/v0/inboxes/inbox_id/messages/message_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.inboxes.messages.get("inbox_id", "message_id");
        expect(response).toEqual({
            inboxId: "inbox_id",
            threadId: "thread_id",
            messageId: "message_id",
            labels: ["labels", "labels"],
            timestamp: new Date("2024-01-15T09:30:00.000Z"),
            from: "from",
            replyTo: ["reply_to", "reply_to"],
            to: ["to", "to"],
            cc: ["cc", "cc"],
            bcc: ["bcc", "bcc"],
            subject: "subject",
            preview: "preview",
            text: "text",
            html: "html",
            attachments: [
                {
                    attachmentId: "attachment_id",
                    filename: "filename",
                    contentType: "content_type",
                    size: 1,
                    inline: true,
                },
                {
                    attachmentId: "attachment_id",
                    filename: "filename",
                    contentType: "content_type",
                    size: 1,
                    inline: true,
                },
            ],
            inReplyTo: "in_reply_to",
            references: ["references", "references"],
            updatedAt: new Date("2024-01-15T09:30:00.000Z"),
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
        });
    });

    test("send", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });
        const rawRequestBody = {
            labels: undefined,
            reply_to: undefined,
            to: undefined,
            cc: undefined,
            bcc: undefined,
            subject: undefined,
            text: undefined,
            html: undefined,
            attachments: undefined,
        };
        const rawResponseBody = { message_id: "message_id", thread_id: "thread_id" };
        server
            .mockEndpoint()
            .post("/v0/inboxes/inbox_id/messages/send")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.inboxes.messages.send("inbox_id", {
            labels: undefined,
            replyTo: undefined,
            to: undefined,
            cc: undefined,
            bcc: undefined,
            subject: undefined,
            text: undefined,
            html: undefined,
            attachments: undefined,
        });
        expect(response).toEqual({
            messageId: "message_id",
            threadId: "thread_id",
        });
    });

    test("reply", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });
        const rawRequestBody = {
            labels: undefined,
            reply_to: undefined,
            to: undefined,
            cc: undefined,
            bcc: undefined,
            text: undefined,
            html: undefined,
            attachments: undefined,
        };
        const rawResponseBody = { message_id: "message_id", thread_id: "thread_id" };
        server
            .mockEndpoint()
            .post("/v0/inboxes/inbox_id/messages/message_id/reply")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.inboxes.messages.reply("inbox_id", "message_id", {
            labels: undefined,
            replyTo: undefined,
            to: undefined,
            cc: undefined,
            bcc: undefined,
            text: undefined,
            html: undefined,
            attachments: undefined,
        });
        expect(response).toEqual({
            messageId: "message_id",
            threadId: "thread_id",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });
        const rawRequestBody = { add_labels: undefined, remove_labels: undefined };
        const rawResponseBody = {
            inbox_id: "inbox_id",
            thread_id: "thread_id",
            message_id: "message_id",
            labels: ["labels", "labels"],
            timestamp: "2024-01-15T09:30:00Z",
            from: "from",
            reply_to: ["reply_to", "reply_to"],
            to: ["to", "to"],
            cc: ["cc", "cc"],
            bcc: ["bcc", "bcc"],
            subject: "subject",
            preview: "preview",
            text: "text",
            html: "html",
            attachments: [
                {
                    attachment_id: "attachment_id",
                    filename: "filename",
                    content_type: "content_type",
                    size: 1,
                    inline: true,
                },
                {
                    attachment_id: "attachment_id",
                    filename: "filename",
                    content_type: "content_type",
                    size: 1,
                    inline: true,
                },
            ],
            in_reply_to: "in_reply_to",
            references: ["references", "references"],
            updated_at: "2024-01-15T09:30:00Z",
            created_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .patch("/v0/inboxes/inbox_id/messages/message_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.inboxes.messages.update("inbox_id", "message_id", {
            addLabels: undefined,
            removeLabels: undefined,
        });
        expect(response).toEqual({
            inboxId: "inbox_id",
            threadId: "thread_id",
            messageId: "message_id",
            labels: ["labels", "labels"],
            timestamp: new Date("2024-01-15T09:30:00.000Z"),
            from: "from",
            replyTo: ["reply_to", "reply_to"],
            to: ["to", "to"],
            cc: ["cc", "cc"],
            bcc: ["bcc", "bcc"],
            subject: "subject",
            preview: "preview",
            text: "text",
            html: "html",
            attachments: [
                {
                    attachmentId: "attachment_id",
                    filename: "filename",
                    contentType: "content_type",
                    size: 1,
                    inline: true,
                },
                {
                    attachmentId: "attachment_id",
                    filename: "filename",
                    contentType: "content_type",
                    size: 1,
                    inline: true,
                },
            ],
            inReplyTo: "in_reply_to",
            references: ["references", "references"],
            updatedAt: new Date("2024-01-15T09:30:00.000Z"),
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
        });
    });
});
