/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { AgentMailClient } from "../../../src/Client";
import * as AgentMail from "../../../src/api/index";

describe("Inboxes", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        const rawResponseBody = {
            count: 1,
            limit: 1,
            next_page_token: "next_page_token",
            inboxes: [
                {
                    inbox_id: "inbox_id",
                    display_name: "display_name",
                    client_id: "client_id",
                    updated_at: "2024-01-15T09:30:00Z",
                    created_at: "2024-01-15T09:30:00Z",
                },
                {
                    inbox_id: "inbox_id",
                    display_name: "display_name",
                    client_id: "client_id",
                    updated_at: "2024-01-15T09:30:00Z",
                    created_at: "2024-01-15T09:30:00Z",
                },
            ],
        };
        server.mockEndpoint().get("/v0/inboxes").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.inboxes.list();
        expect(response).toEqual({
            count: 1,
            limit: 1,
            nextPageToken: "next_page_token",
            inboxes: [
                {
                    inboxId: "inbox_id",
                    displayName: "display_name",
                    clientId: "client_id",
                    updatedAt: new Date("2024-01-15T09:30:00.000Z"),
                    createdAt: new Date("2024-01-15T09:30:00.000Z"),
                },
                {
                    inboxId: "inbox_id",
                    displayName: "display_name",
                    clientId: "client_id",
                    updatedAt: new Date("2024-01-15T09:30:00.000Z"),
                    createdAt: new Date("2024-01-15T09:30:00.000Z"),
                },
            ],
        });
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        const rawResponseBody = {
            inbox_id: "inbox_id",
            display_name: "display_name",
            client_id: "client_id",
            updated_at: "2024-01-15T09:30:00Z",
            created_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .get("/v0/inboxes/inbox_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.inboxes.get("inbox_id");
        expect(response).toEqual({
            inboxId: "inbox_id",
            displayName: "display_name",
            clientId: "client_id",
            updatedAt: new Date("2024-01-15T09:30:00.000Z"),
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        const rawResponseBody = { name: "name", message: "message" };
        server
            .mockEndpoint()
            .get("/v0/inboxes/inbox_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.inboxes.get("inbox_id");
        }).rejects.toThrow(AgentMail.NotFoundError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });
        const rawRequestBody = {
            username: undefined,
            domain: undefined,
            display_name: undefined,
            client_id: undefined,
        };
        const rawResponseBody = {
            inbox_id: "inbox_id",
            display_name: "display_name",
            client_id: "client_id",
            updated_at: "2024-01-15T09:30:00Z",
            created_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .post("/v0/inboxes")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.inboxes.create({
            username: undefined,
            domain: undefined,
            displayName: undefined,
            clientId: undefined,
        });
        expect(response).toEqual({
            inboxId: "inbox_id",
            displayName: "display_name",
            clientId: "client_id",
            updatedAt: new Date("2024-01-15T09:30:00.000Z"),
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });
        const rawRequestBody = {
            username: undefined,
            domain: undefined,
            display_name: undefined,
            client_id: undefined,
        };
        const rawResponseBody = { name: "name", errors: { key: "value" } };
        server
            .mockEndpoint()
            .post("/v0/inboxes")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.inboxes.create({
                username: undefined,
                domain: undefined,
                displayName: undefined,
                clientId: undefined,
            });
        }).rejects.toThrow(AgentMail.ValidationError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        server.mockEndpoint().delete("/v0/inboxes/inbox_id").respondWith().statusCode(200).build();

        const response = await client.inboxes.delete("inbox_id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        const rawResponseBody = { name: "name", message: "message" };
        server
            .mockEndpoint()
            .delete("/v0/inboxes/inbox_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.inboxes.delete("inbox_id");
        }).rejects.toThrow(AgentMail.NotFoundError);
    });
});
