/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { AgentMailClient } from "../../src/Client";
import * as AgentMail from "../../src/api/index";

describe("Domains", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        const rawResponseBody = {
            count: 1,
            domains: [
                {
                    domain_id: "your-domain.com",
                    organization_id: "org_12345",
                    feedback_enabled: true,
                    created_at: "2025-07-06T08:40:50.417Z",
                    updated_at: "2025-07-06T08:40:50.417Z",
                },
            ],
        };
        server.mockEndpoint().get("/v0/domains").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.domains.list();
        expect(response).toEqual({
            count: 1,
            domains: [
                {
                    domainId: "your-domain.com",
                    organizationId: "org_12345",
                    feedbackEnabled: true,
                    createdAt: new Date("2025-07-06T08:40:50.417Z"),
                    updatedAt: new Date("2025-07-06T08:40:50.417Z"),
                },
            ],
        });
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        const rawResponseBody = {
            domain_id: " your-domain.com",
            organization_id: "org_12345",
            created_at: "2025-07-06T08:40:50.417Z",
            updated_at: "2025-07-06T08:40:50.417Z",
            feedback_enabled: true,
            status: "PENDING",
            records: [
                {
                    type: "CNAME",
                    name: "{token}._domainkey. your-domain.com",
                    value: "{token}.dkim.amazonses.com",
                    status: "MISSING",
                },
                {
                    type: "MX",
                    name: " your-domain.com",
                    value: "inbound-smtp.us-east-1.amazonaws.com",
                    status: "VERIFIED",
                    priority: 10,
                },
                {
                    type: "TXT",
                    name: "_dmarc. your-domain.com",
                    value: "v=DMARC1; p=reject; rua=mailto:dmarc@agentmail.dev",
                    status: "VERIFIED",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/v0/domains/%20your-domain.com")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.domains.get(" your-domain.com");
        expect(response).toEqual({
            domainId: " your-domain.com",
            organizationId: "org_12345",
            createdAt: new Date("2025-07-06T08:40:50.417Z"),
            updatedAt: new Date("2025-07-06T08:40:50.417Z"),
            feedbackEnabled: true,
            status: "PENDING",
            records: [
                {
                    type: "CNAME",
                    name: "{token}._domainkey. your-domain.com",
                    value: "{token}.dkim.amazonses.com",
                    status: "MISSING",
                },
                {
                    type: "MX",
                    name: " your-domain.com",
                    value: "inbound-smtp.us-east-1.amazonaws.com",
                    status: "VERIFIED",
                    priority: 10,
                },
                {
                    type: "TXT",
                    name: "_dmarc. your-domain.com",
                    value: "v=DMARC1; p=reject; rua=mailto:dmarc@agentmail.dev",
                    status: "VERIFIED",
                },
            ],
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        const rawResponseBody = { name: "name", message: "message" };
        server.mockEndpoint().get("/v0/domains/domain").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.domains.get("domain");
        }).rejects.toThrow(AgentMail.NotFoundError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });
        const rawRequestBody = { domain: "your-domain.com" };
        const rawResponseBody = {
            domain_id: "your-domain.com",
            organization_id: "org_12345",
            status: "PENDING",
            created_at: "2025-07-06T08:40:50.417Z",
            updated_at: "2025-07-06T08:40:50.417Z",
            feedback_enabled: true,
            records: [
                {
                    type: "CNAME",
                    name: "{token}._domainkey.your-domain.com",
                    value: "{token}.dkim.amazonses.com",
                    status: "MISSING",
                },
                {
                    type: "MX",
                    name: "your-domain.com",
                    value: "inbound-smtp.us-east-1.amazonaws.com",
                    priority: 10,
                    status: "VERIFIED",
                },
                {
                    type: "TXT",
                    name: "_dmarc.your-domain.com",
                    value: "v=DMARC1; p=reject; rua=mailto:dmarc@agentmail.to",
                    status: "MISSING",
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/v0/domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.domains.create({
            domain: "your-domain.com",
        });
        expect(response).toEqual({
            domainId: "your-domain.com",
            organizationId: "org_12345",
            status: "PENDING",
            createdAt: new Date("2025-07-06T08:40:50.417Z"),
            updatedAt: new Date("2025-07-06T08:40:50.417Z"),
            feedbackEnabled: true,
            records: [
                {
                    type: "CNAME",
                    name: "{token}._domainkey.your-domain.com",
                    value: "{token}.dkim.amazonses.com",
                    status: "MISSING",
                },
                {
                    type: "MX",
                    name: "your-domain.com",
                    value: "inbound-smtp.us-east-1.amazonaws.com",
                    priority: 10,
                    status: "VERIFIED",
                },
                {
                    type: "TXT",
                    name: "_dmarc.your-domain.com",
                    value: "v=DMARC1; p=reject; rua=mailto:dmarc@agentmail.to",
                    status: "MISSING",
                },
            ],
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });
        const rawRequestBody = { domain: "domain", feedback_enabled: undefined };
        const rawResponseBody = { name: "name", errors: { key: "value" } };
        server
            .mockEndpoint()
            .post("/v0/domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.domains.create({
                domain: "domain",
                feedbackEnabled: undefined,
            });
        }).rejects.toThrow(AgentMail.ValidationError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        server.mockEndpoint().delete("/v0/domains/dom_12345").respondWith().statusCode(200).build();

        const response = await client.domains.delete("dom_12345");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        const rawResponseBody = { name: "name", message: "message" };
        server
            .mockEndpoint()
            .delete("/v0/domains/domain")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.domains.delete("domain");
        }).rejects.toThrow(AgentMail.NotFoundError);
    });
});
