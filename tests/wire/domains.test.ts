/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { AgentMailClient } from "../../src/Client";
import * as AgentMail from "../../src/api/index";

describe("Domains", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        const rawResponseBody = {
            count: 1,
            next_page_token: "next_page_token",
            domains: [
                {
                    domain_id: "domain_id",
                    feedback_enabled: true,
                    client_id: "client_id",
                    updated_at: "2024-01-15T09:30:00Z",
                    created_at: "2024-01-15T09:30:00Z",
                },
                {
                    domain_id: "domain_id",
                    feedback_enabled: true,
                    client_id: "client_id",
                    updated_at: "2024-01-15T09:30:00Z",
                    created_at: "2024-01-15T09:30:00Z",
                },
            ],
        };
        server.mockEndpoint().get("/v0/domains").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            count: 1,
            nextPageToken: "next_page_token",
            domains: [
                {
                    domainId: "domain_id",
                    feedbackEnabled: true,
                    clientId: "client_id",
                    updatedAt: new Date("2024-01-15T09:30:00.000Z"),
                    createdAt: new Date("2024-01-15T09:30:00.000Z"),
                },
                {
                    domainId: "domain_id",
                    feedbackEnabled: true,
                    clientId: "client_id",
                    updatedAt: new Date("2024-01-15T09:30:00.000Z"),
                    createdAt: new Date("2024-01-15T09:30:00.000Z"),
                },
            ],
        };
        const page = await client.domains.list();

        expect(expected.domains).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.domains).toEqual(nextPage.data);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        const rawResponseBody = {
            domain_id: "domain_id",
            domain: "domain",
            status: "PENDING",
            feedback_enabled: true,
            records: [
                { type: "TXT", name: "name", value: "value", status: "MISSING", priority: 1 },
                { type: "TXT", name: "name", value: "value", status: "MISSING", priority: 1 },
            ],
            client_id: "client_id",
            updated_at: "2024-01-15T09:30:00Z",
            created_at: "2024-01-15T09:30:00Z",
        };
        server.mockEndpoint().get("/v0/domains/domain").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.domains.get("domain");
        expect(response).toEqual({
            domainId: "domain_id",
            domain: "domain",
            status: "PENDING",
            feedbackEnabled: true,
            records: [
                {
                    type: "TXT",
                    name: "name",
                    value: "value",
                    status: "MISSING",
                    priority: 1,
                },
                {
                    type: "TXT",
                    name: "name",
                    value: "value",
                    status: "MISSING",
                    priority: 1,
                },
            ],
            clientId: "client_id",
            updatedAt: new Date("2024-01-15T09:30:00.000Z"),
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        const rawResponseBody = { name: "name", message: "message" };
        server.mockEndpoint().get("/v0/domains/domain").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.domains.get("domain");
        }).rejects.toThrow(AgentMail.NotFoundError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });
        const rawRequestBody = { domain: "domain", feedback_enabled: true };
        const rawResponseBody = {
            domain_id: "domain_id",
            domain: "domain",
            status: "PENDING",
            feedback_enabled: true,
            records: [
                { type: "TXT", name: "name", value: "value", status: "MISSING", priority: 1 },
                { type: "TXT", name: "name", value: "value", status: "MISSING", priority: 1 },
            ],
            client_id: "client_id",
            updated_at: "2024-01-15T09:30:00Z",
            created_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .post("/v0/domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.domains.create({
            domain: "domain",
            feedbackEnabled: true,
        });
        expect(response).toEqual({
            domainId: "domain_id",
            domain: "domain",
            status: "PENDING",
            feedbackEnabled: true,
            records: [
                {
                    type: "TXT",
                    name: "name",
                    value: "value",
                    status: "MISSING",
                    priority: 1,
                },
                {
                    type: "TXT",
                    name: "name",
                    value: "value",
                    status: "MISSING",
                    priority: 1,
                },
            ],
            clientId: "client_id",
            updatedAt: new Date("2024-01-15T09:30:00.000Z"),
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });
        const rawRequestBody = { domain: "domain", feedback_enabled: true };
        const rawResponseBody = { name: "name", errors: { key: "value" } };
        server
            .mockEndpoint()
            .post("/v0/domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.domains.create({
                domain: "domain",
                feedbackEnabled: true,
            });
        }).rejects.toThrow(AgentMail.ValidationError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        server.mockEndpoint().delete("/v0/domains/domain").respondWith().statusCode(200).build();

        const response = await client.domains.delete("domain");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AgentMailClient({
            apiKey: "test",
            environment: { http: server.baseUrl, websockets: server.baseUrl },
        });

        const rawResponseBody = { name: "name", message: "message" };
        server
            .mockEndpoint()
            .delete("/v0/domains/domain")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.domains.delete("domain");
        }).rejects.toThrow(AgentMail.NotFoundError);
    });
});
