// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions } from "../../../../BaseClient.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as core from "../../../../core/index.js";
import * as environments from "../../../../environments.js";
import * as errors from "../../../../errors/index.js";
import { WebsocketsSocket } from "./Socket.js";

export declare namespace Websockets {
    export interface Options extends BaseClientOptions {}

    export interface ConnectArgs {
        authToken?: string | undefined;
        /** Arbitrary headers to send with the websocket connect request. */
        headers?: Record<string, string>;
        /** Enable debug mode on the websocket. Defaults to false. */
        debug?: boolean;
        /** Number of reconnect attempts. Defaults to 30. */
        reconnectAttempts?: number;
    }
}

export class Websockets {
    protected readonly _options: Websockets.Options;

    constructor(_options: Websockets.Options = {}) {
        this._options = _options;
    }

    public async connect(args: Websockets.ConnectArgs = {}): Promise<WebsocketsSocket> {
        const { authToken, headers, debug, reconnectAttempts } = args;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (authToken != null) {
            _queryParams.auth_token = authToken;
        }

        const _headers: Record<string, unknown> = mergeHeaders(
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            headers,
        );
        const socket = new core.ReconnectingWebSocket({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.AgentMailEnvironment.Production
                    ).websockets,
                "/v0",
            ),
            protocols: [],
            queryParameters: _queryParams,
            headers: _headers,
            options: { debug: debug ?? false, maxRetries: reconnectAttempts ?? 30 },
        });
        return new WebsocketsSocket({ socket });
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env.AGENTMAIL_API_KEY;
        if (bearer == null) {
            throw new errors.AgentMailError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a AGENTMAIL_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
