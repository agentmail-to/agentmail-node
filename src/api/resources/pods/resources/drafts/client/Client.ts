/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as AgentMail from "../../../../../index.js";
import * as serializers from "../../../../../../serialization/index.js";
import { toJson } from "../../../../../../core/json.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace Drafts {
    export interface Options {
        environment?: core.Supplier<environments.AgentMailEnvironment | environments.AgentMailEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

export class Drafts {
    protected readonly _options: Drafts.Options;

    constructor(_options: Drafts.Options = {}) {
        this._options = _options;
    }

    /**
     * @param {AgentMail.pods.PodId} podId
     * @param {AgentMail.pods.ListDraftsRequest} request
     * @param {Drafts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMail.NotFoundError}
     *
     * @example
     *     await client.pods.drafts.list("pod_id")
     */
    public list(
        podId: AgentMail.pods.PodId,
        request: AgentMail.pods.ListDraftsRequest = {},
        requestOptions?: Drafts.RequestOptions,
    ): core.HttpResponsePromise<AgentMail.ListDraftsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(podId, request, requestOptions));
    }

    private async __list(
        podId: AgentMail.pods.PodId,
        request: AgentMail.pods.ListDraftsRequest = {},
        requestOptions?: Drafts.RequestOptions,
    ): Promise<core.WithRawResponse<AgentMail.ListDraftsResponse>> {
        const { limit, pageToken, labels, before, after, ascending } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (pageToken != null) {
            _queryParams["page_token"] = pageToken;
        }

        if (labels != null) {
            _queryParams["labels"] = toJson(
                serializers.Labels.jsonOrThrow(labels, { unrecognizedObjectKeys: "strip", omitUndefined: true }),
            );
        }

        if (before != null) {
            _queryParams["before"] = before.toISOString();
        }

        if (after != null) {
            _queryParams["after"] = after.toISOString();
        }

        if (ascending != null) {
            _queryParams["ascending"] = ascending.toString();
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.AgentMailEnvironment.Production
                    ).http,
                `/v0/pods/${encodeURIComponent(serializers.pods.PodId.jsonOrThrow(podId, { omitUndefined: true }))}/drafts`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ListDraftsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new AgentMail.NotFoundError(
                        serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.AgentMailError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AgentMailError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.AgentMailTimeoutError("Timeout exceeded when calling GET /v0/pods/{pod_id}/drafts.");
            case "unknown":
                throw new errors.AgentMailError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {AgentMail.pods.PodId} podId
     * @param {AgentMail.DraftId} draftId
     * @param {Drafts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMail.NotFoundError}
     *
     * @example
     *     await client.pods.drafts.get("pod_id", "draft_id")
     */
    public get(
        podId: AgentMail.pods.PodId,
        draftId: AgentMail.DraftId,
        requestOptions?: Drafts.RequestOptions,
    ): core.HttpResponsePromise<AgentMail.Draft> {
        return core.HttpResponsePromise.fromPromise(this.__get(podId, draftId, requestOptions));
    }

    private async __get(
        podId: AgentMail.pods.PodId,
        draftId: AgentMail.DraftId,
        requestOptions?: Drafts.RequestOptions,
    ): Promise<core.WithRawResponse<AgentMail.Draft>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.AgentMailEnvironment.Production
                    ).http,
                `/v0/pods/${encodeURIComponent(serializers.pods.PodId.jsonOrThrow(podId, { omitUndefined: true }))}/drafts/${encodeURIComponent(serializers.DraftId.jsonOrThrow(draftId, { omitUndefined: true }))}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.Draft.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new AgentMail.NotFoundError(
                        serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.AgentMailError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AgentMailError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.AgentMailTimeoutError(
                    "Timeout exceeded when calling GET /v0/pods/{pod_id}/drafts/{draft_id}.",
                );
            case "unknown":
                throw new errors.AgentMailError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["AGENTMAIL_API_KEY"];
        if (bearer == null) {
            throw new errors.AgentMailError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a AGENTMAIL_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
