/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as AgentMail from "../../../../../index.js";
import { toJson } from "../../../../../../core/json.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace Metrics {
    export interface Options {
        environment?: core.Supplier<environments.AgentMailEnvironment | environments.AgentMailEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Metrics {
    protected readonly _options: Metrics.Options;

    constructor(_options: Metrics.Options = {}) {
        this._options = _options;
    }

    /**
     * @param {AgentMail.inboxes.InboxId} inboxId
     * @param {AgentMail.inboxes.ListInboxMetricsRequest} request
     * @param {Metrics.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMail.NotFoundError}
     * @throws {@link AgentMail.ValidationError}
     *
     * @example
     *     await client.inboxes.metrics.get("inbox_id", {
     *         start_timestamp: "2024-01-15T09:30:00Z",
     *         end_timestamp: "2024-01-15T09:30:00Z"
     *     })
     */
    public get(
        inboxId: AgentMail.inboxes.InboxId,
        request: AgentMail.inboxes.ListInboxMetricsRequest,
        requestOptions?: Metrics.RequestOptions,
    ): core.HttpResponsePromise<AgentMail.ListMetricsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(inboxId, request, requestOptions));
    }

    private async __get(
        inboxId: AgentMail.inboxes.InboxId,
        request: AgentMail.inboxes.ListInboxMetricsRequest,
        requestOptions?: Metrics.RequestOptions,
    ): Promise<core.WithRawResponse<AgentMail.ListMetricsResponse>> {
        const { event_types: eventTypes, start_timestamp: startTimestamp, end_timestamp: endTimestamp } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (eventTypes != null) {
            _queryParams["event_types"] = toJson(eventTypes);
        }

        _queryParams["start_timestamp"] = startTimestamp;
        _queryParams["end_timestamp"] = endTimestamp;
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.AgentMailEnvironment.Production
                    ).http,
                `/v0/inboxes/${encodeURIComponent(inboxId)}/metrics`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as AgentMail.ListMetricsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new AgentMail.NotFoundError(
                        _response.error.body as AgentMail.ErrorResponse,
                        _response.rawResponse,
                    );
                case 400:
                    throw new AgentMail.ValidationError(
                        _response.error.body as AgentMail.ValidationErrorResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.AgentMailError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AgentMailError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.AgentMailTimeoutError(
                    "Timeout exceeded when calling GET /v0/inboxes/{inbox_id}/metrics.",
                );
            case "unknown":
                throw new errors.AgentMailError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["AGENTMAIL_API_KEY"];
        if (bearer == null) {
            throw new errors.AgentMailError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a AGENTMAIL_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
