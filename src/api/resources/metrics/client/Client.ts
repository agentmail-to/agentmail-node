// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as core from "../../../../core/index.js";
import { toJson } from "../../../../core/json.js";
import * as environments from "../../../../environments.js";
import * as errors from "../../../../errors/index.js";
import * as serializers from "../../../../serialization/index.js";
import * as AgentMail from "../../../index.js";

export declare namespace Metrics {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class Metrics {
    protected readonly _options: Metrics.Options;

    constructor(_options: Metrics.Options = {}) {
        this._options = _options;
    }

    /**
     * @param {AgentMail.ListMetricsRequest} request
     * @param {Metrics.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMail.NotFoundError}
     *
     * @example
     *     await client.metrics.list({
     *         startTimestamp: new Date("2024-01-15T09:30:00.000Z"),
     *         endTimestamp: new Date("2024-01-15T09:30:00.000Z")
     *     })
     */
    public list(
        request: AgentMail.ListMetricsRequest,
        requestOptions?: Metrics.RequestOptions,
    ): core.HttpResponsePromise<AgentMail.ListMetricsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: AgentMail.ListMetricsRequest,
        requestOptions?: Metrics.RequestOptions,
    ): Promise<core.WithRawResponse<AgentMail.ListMetricsResponse>> {
        const { eventTypes, startTimestamp, endTimestamp } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (eventTypes != null) {
            _queryParams.event_types = toJson(
                serializers.MetricEventTypes.jsonOrThrow(eventTypes, {
                    unrecognizedObjectKeys: "strip",
                    omitUndefined: true,
                }),
            );
        }

        _queryParams.start_timestamp = startTimestamp.toISOString();
        _queryParams.end_timestamp = endTimestamp.toISOString();
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.AgentMailEnvironment.Production
                    ).http,
                "/v0/metrics",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ListMetricsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new AgentMail.NotFoundError(
                        serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.AgentMailError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AgentMailError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.AgentMailTimeoutError("Timeout exceeded when calling GET /v0/metrics.");
            case "unknown":
                throw new errors.AgentMailError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env.AGENTMAIL_API_KEY;
        if (bearer == null) {
            throw new errors.AgentMailError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a AGENTMAIL_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
